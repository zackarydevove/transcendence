generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  online
  offline
  ingame
}

model User {
  id                   String          @id @unique @default(uuid())
  username             String          @unique
  email                String          @unique
  password             String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  refreshTokens        RefreshToken[]
  initiatedFriendships Friendship[]    @relation("FriendshipUser1")
  acceptedFriendships  Friendship[]    @relation("FriendshipUser2")
  blockedFriends       String[]
  friendMessages       FriendMessage[]
  chats                Member[]
  messages             Message[]
  invited              Invite[]
  status			   UserStatus		@default(offline)
}

model RefreshToken {
  id          String    @id @unique @default(uuid())
  userId      String
  hashedToken String
  revoked     Boolean   @default(false)
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum ChatType {
  public
  private
  protected
}

model Chat {
  id        String    @id @unique @default(uuid())
  name      String
  type      ChatType
  password  String?
  members   Member[]
  messages  Message[]
  banned    String[]
  invited   Invite[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  creator
  admin
  member
}

model Member {
  id         String    @id @unique @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  chatId     String
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role       UserRole
  mutedUntil DateTime?
}

model Message {
  id        String   @id @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Invite {
  id        String   @id @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model FriendMessage {
  id           String     @id @unique @default(uuid())
  content      String
  createdAt    DateTime   @default(now())
  senderId     String
  sender       User       @relation(fields: [senderId], references: [id])
  friendshipId String
  friendship   Friendship @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
}

model Friendship {
  id        String          @id @unique @default(uuid())
  user1Id   String
  user1     User            @relation("FriendshipUser1", fields: [user1Id], references: [id])
  user2Id   String
  user2     User            @relation("FriendshipUser2", fields: [user2Id], references: [id])
  messages  FriendMessage[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
